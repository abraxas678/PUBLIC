#!/bin/bash

# Script to automatically generate the justfile based on .sh scripts
# in the specified directory.

set -e # Exit immediately if a command exits with a non-zero status.

SHS_DIR="/home/abrax/tmp/public/shs"
JUSTFILE="$SHS_DIR/justfile"
TMP_JUSTFILE="$JUSTFILE.tmp"
SCRIPT_NAME=$(basename "$0") # Get the name of this script

echo "Updating justfile: $JUSTFILE"
echo "Scanning directory: $SHS_DIR"

# --- Start Generating Justfile Content ---
# Use a temporary file to avoid corrupting the original if something fails
{
    # Header
    echo "# Justfile for managing setup scripts in $SHS_DIR"
    echo "# Auto-generated by $SCRIPT_NAME on $(date)"
    echo "# DO NOT EDIT MANUALLY - Run './$SCRIPT_NAME' to regenerate."
    echo
    echo "# Default recipe: Use 'just --choose' interactively or specify a recipe"
    echo "# Example: just thorium, just show_docker, just run_setup"
    echo
    echo "# List available recipes"
    echo "list:"
    echo "    @just --list"
    echo

    setup_recipes=() # Array to hold recipe names for the 'run_setup' task
    declare -A recipes_generated # Keep track of generated names to avoid duplicates

    # Find sh files and generate recipes
    sh_files_found=0
    for sh_file in "$SHS_DIR"/*.sh; do
        # Handle case where no .sh files are found and the glob returns itself
        if [[ ! -f "$sh_file" ]]; then continue; fi

        base_name=$(basename "$sh_file")
        sh_files_found=$((sh_files_found + 1))

        # Skip the generator script itself
        if [[ "$base_name" == "$SCRIPT_NAME" ]]; then
            echo "# Skipping self ($SCRIPT_NAME)"
            echo
            continue
        fi

        # Generate recipe name: remove .sh suffix, then remove leading NN_ prefix
        recipe_name=$(echo "$base_name" | sed -e 's/.sh$//' -e 's/^[0-9]\{1,2\}_//')

        # Generate a basic comment from the recipe name (replace _ with space, capitalize words)
        comment_name=$(echo "$recipe_name" | sed -e 's/_/ /g' -e 's/\b\(.\)/\u\1/g')

        # Basic check for empty recipe name
        if [[ -z "$recipe_name" ]]; then
             echo "# Warning: Could not generate recipe name for $base_name - skipping"
             echo
             continue
        fi

        # Check for duplicate recipe names (e.g., if 01_foo.sh and foo.sh exist)
        if [[ -v recipes_generated["$recipe_name"] ]]; then
            echo "# Warning: Duplicate recipe name '$recipe_name' detected. Skipping entry for $base_name."
            echo "# Previous script generating this name: ${recipes_generated[$recipe_name]}"
            echo
            continue
        fi
        recipes_generated["$recipe_name"]="$base_name"

        # --- Execution Recipe ---
        echo "# $comment_name: Run '$base_name'"
        echo "$recipe_name:"
        echo "    @echo \"--- Running $base_name ---\""
        # Quote the script name in case of spaces or special characters
        echo "    @./\"$base_name\""
        echo "    @echo \"--- Finished $base_name ---\""
        echo

        # --- Show Recipe ---
        echo "# Show $comment_name: Display content of '$base_name'"
        echo "show_$recipe_name:"
        echo "    @echo \"--- Content of $base_name ---\""
        # Using 'cat'. Use 'bat -p --color=always' or similar if preferred and available.
        echo "    @cat ./\"$base_name\""
        echo "    @echo \"--- End of $base_name ---\""
        echo

        # Add to setup list, excluding specific interactive/utility scripts based on recipe name
        # Exclude choose_scripts (interactive menu) and edit_visudo (interactive editor)
        if [[ "$recipe_name" != "choose_scripts" && "$recipe_name" != "edit_visudo" ]]; then
             setup_recipes+=("$recipe_name")
             echo "# (Eligible for 'run_setup')"
             echo
        else
             echo "# (Not included in 'run_setup')"
             echo
        fi
    done

    if [[ $sh_files_found -eq 0 ]]; then
        echo "# Warning: No .sh files found in $SHS_DIR (excluding $SCRIPT_NAME)"
    fi

    # --- run_setup Recipe ---
    # Generate run_setup recipe only if there are eligible scripts
    if [ ${#setup_recipes[@]} -gt 0 ]; then
        echo "# Run Setup: Executes most non-interactive scripts sequentially"
        # Join the array elements with spaces for dependencies
        printf -v setup_deps ' %s' "${setup_recipes[@]}"
        # Remove the leading space added by printf
        setup_deps=${setup_deps:1}

        echo "run_setup: $setup_deps"
        echo "    @echo"
        echo "    @echo \"--- All non-interactive setup scripts specified in 'run_setup' have been executed. ---\""
        echo
        echo "# Alias for run_setup"
        echo "all: run_setup"
        echo
    else
         echo "# No eligible scripts found for 'run_setup' recipe."
         echo
    fi

} > "$TMP_JUSTFILE" # Redirect all generated content to the temporary file

# --- Final Step: Replace old justfile with new ---
# Check if temp file was created successfully and is not empty
if [[ -f "$TMP_JUSTFILE" && -s "$TMP_JUSTFILE" ]]; then
    mv "$TMP_JUSTFILE" "$JUSTFILE"
    echo "Justfile updated successfully: $JUSTFILE"
    # Make the script executable if it's not already
    if [[ ! -x "$SHS_DIR/$SCRIPT_NAME" ]]; then
        chmod +x "$SHS_DIR/$SCRIPT_NAME"
        echo "Made $SCRIPT_NAME executable."
    fi
else
    echo "Error: Failed to generate temporary justfile ($TMP_JUSTFILE). Original justfile unchanged."
    # Remove empty/failed temp file if it exists
    rm -f "$TMP_JUSTFILE"
    exit 1
fi

exit 0 